#import <CFSDK/CFSDK.h>
#import "RNPgReactNativeSdkBridge.h"
#import "UIKit/UIWindow.h"
#import "UIKit/UIViewController.h"
#import <Foundation/NSJSONSerialization.h>
@implementation RNPgReactNativeSdkBridge
RCTResponseSenderBlock callbackNew;
- (dispatch_queue_t)methodQueue
{
    return dispatch_get_main_queue();
}
RCT_EXPORT_MODULE()
RCT_EXPORT_METHOD(startPaymentWEB:(NSDictionary *) parmas env:(NSString *)env callback:(RCTResponseSenderBlock)callback)
{
    NSLog(@"CF::SDK::IOS::WEB::INVOKED");
    NSMutableDictionary *copy = [parmas mutableCopy];
    [copy setObject:@"react-native-ios-sdk" forKey:@"source"];
    callbackNew=callback;
    CFPaymentService *cfps = [[CFPaymentService alloc]init];
    [cfps doWebCheckoutPaymentWithParams:copy env:env callback:self];
}

RCT_EXPORT_METHOD(startPaymentUPI:(NSDictionary *) parmas env:(NSString *)env callback:(RCTResponseSenderBlock)callback)
{
    NSLog(@"CF::SDK::IOS::UPI::INVOKED");
    NSMutableDictionary *copy = [parmas mutableCopy];
    [copy setObject:@"react-native-ios-sdk" forKey:@"source"];
    [copy setObject:@"true" forKey:@"jsonify"];
    callbackNew=callback;
    CFPaymentService *cfps = [[CFPaymentService alloc]init];
    [cfps doUPIPaymentWithParams:copy env:env callback:self];
}

RCT_REMAP_METHOD(getUPIApps, resolver: (RCTPromiseResolveBlock)resolve
     rejecter:(RCTPromiseRejectBlock)reject)
{
    NSLog(@"CF::SDK::IOS::getUPIApps::INVOKED");
    CFPaymentService *cfps = [[CFPaymentService alloc]init];
    NSArray *value = [cfps getUPIApps];

    if ([value count] == 0) {
        reject(@"404", @"no UPI apps found.", nil);
    } else {
        NSError *writeError = nil;
        NSData *jsonData = [NSJSONSerialization dataWithJSONObject:value options:NSJSONWritingPrettyPrinted error:&writeError];
        NSString *jsonString = [[NSString alloc] initWithData:jsonData encoding:NSUTF8StringEncoding];
        resolve(jsonString);
    }
}

- (void)onPaymentCompletionWithMsg:(NSString * _Nonnull)msg {
    NSLog(@"CF::SDK::IOS::RESPONSE:: %@", msg);
    callbackNew(@[msg]);
}

@end

